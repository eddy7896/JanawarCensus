version: '3.8'

services:
  # Backend API Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data/audio:/app/data/audio
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - janawar-network

  # Database Service (PostgreSQL)
  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-janawar}
      POSTGRES_USER: ${POSTGRES_USER:-janawar}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-janawar123}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - janawar-network
    restart: unless-stopped

  # Redis for caching and task queue
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - janawar-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - janawar-network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      - api
      - frontend
    networks:
      - janawar-network
    restart: unless-stopped

  # Certbot for SSL certificates (Let's Encrypt)
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - janawar-network

networks:
  janawar-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
