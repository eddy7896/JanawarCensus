version: '3.8'

services:
  # Backend API Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PYTHONUNBUFFERED=1
    container_name: janawar-api
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data/audio:/app/data/audio
      - ./data/birdnet_models:/app/birdnet_models
      - /tmp:/tmp  # For temporary files
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - BIRDNET_MODEL_PATH=/app/birdnet_models/checkpoints/V2.4/BirdNET_GLOBAL_6K_V2.4_Model
      - BIRDNET_LABELS_PATH=/app/birdnet_models/checkpoints/V2.4/BirdNET_GLOBAL_6K_V2.4_Labels.txt
      - BIRDNET_CLASSIFIER_LABELS=/app/birdnet_models/checkpoints/V2.4/BirdNET_GLOBAL_6K_V2.4_Classifier_Labels.txt
      - BIRDNET_MDATA_MODEL_PATH=/app/birdnet_models/checkpoints/V2.4/BirdNET_GLOBAL_6K_V2.4_MData_Model_V2_FP32.tflite
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - janawar-network

  # Database Service (PostgreSQL)
  db:
    image: postgres:13-alpine
    container_name: janawar-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-janawar}
      POSTGRES_USER: ${POSTGRES_USER:-janawar}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-janawar123}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-janawar} -d ${POSTGRES_DB:-janawar}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - janawar-network
    restart: unless-stopped

  # Redis for caching and task queue
  redis:
    image: redis:6-alpine
    container_name: janawar-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - janawar-network
    restart: unless-stopped

  # Worker for background tasks (optional)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: worker
    container_name: janawar-worker
    volumes:
      - ./backend:/app
      - ./data/audio:/app/data/audio
      - ./data/birdnet_models:/app/birdnet_models
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - janawar-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - janawar-network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      - api
      - frontend
    networks:
      - janawar-network
    restart: unless-stopped

  # Certbot for SSL certificates (Let's Encrypt)
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - janawar-network

networks:
  janawar-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
